@* sauce:   https://www.meziantou.net/anchor-navigation-in-a-blazor-application.htm
   see also https://github.com/DevExpress/Blazor/tree/master/tools/DevExpress.Blazor.AnchorUtils *@

@namespace TailBlazor.Components

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@implements IDisposable

@code {

    private Task<IJSObjectReference> _module;
    private Task<IJSObjectReference> Module => _module ??= JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Components/AnchorNavigationHook/AnchorNavigationHook.razor.js").AsTask();

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await ScrollToFragment();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    private async void OnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        await ScrollToFragment();
    }

    private async Task ScrollToFragment()
    {
        var uri = new Uri(NavigationManager.Uri, UriKind.Absolute);
        var fragment = uri.Fragment;
        var module = await Module;
        if (fragment.StartsWith('#'))
        {
            // Handle text fragment (https://example.org/#test:~:text=foo)
            // https://github.com/WICG/scroll-to-text-fragment/
            var elementId = fragment[1..];
            var index = elementId.IndexOf(":~:", StringComparison.Ordinal);
            if (index > 0)
            {
                elementId = elementId[..index];
            }

            if (!string.IsNullOrEmpty(elementId))
            {
                await module.InvokeAsync<string>("scrollToId", elementId);
            }
        }
        else
        {
            await module.InvokeAsync<string>("scrollToId", "");
        }
    }
}