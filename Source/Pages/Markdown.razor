@page "/{*page}"

<AnchorNavigationHook />

<div class="h-full flex">

    @if (found is null)
    {
        <Loading />
    }
    else if (found is false)
    {
        <NotFound />
    }
    else
    {
        <div class="prose prose-sm md:prose-md lg:prose-lg xl:prose-xl 2xl:prose-2xl dark:prose-invert markdown" >
                @((MarkupString)content)
        </div>
    } 
    
</div>

@code
{
    [Parameter] public string? page { get; set; }

    [Inject] public IMarkdownContentProvider MarkdownContentProvider { get; set; }

    private string? content = null;
    private bool? found { get; set; } = null;

    protected override async Task OnParametersSetAsync()
    {
        page = page switch
        {
            null => "overview",
            string _ when page.Contains('#') => page[..page.IndexOf('#')],
            _ => page
        };
     
        if (string.IsNullOrEmpty(page))
            return;

        found = null;

        var markdown = await MarkdownContentProvider.GetMarkdownContent(page);

        if (markdown is not null)
        {
            content = markdown;
            found = true;
        }
        else
        {
            found = false;
        }
    }
}