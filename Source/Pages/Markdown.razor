@page "/{*page}"

<AnchorNavigationHook />


@if (found is null)
{
    @* <div class="flex flex-col h-full" > <Loading /></div>    *@
}
else if (found is false)
{
    <NotFound />
}
else
{
    <div class="prose prose-sm 
                sm:prose-base lg:prose-lg dark:prose-invert 
                markdown" >
            @((MarkupString)content)
    </div>
} 
    

@code
{
    [Parameter] public string? page { get; set; }

    [Inject] public IMarkdownContentProvider MarkdownContentProvider { get; set; }

    private string? content = null;
    private bool? found { get; set; } = null;

    protected override async Task OnParametersSetAsync()
    {
        page = page switch
        {
            null => "overview",
            string _ when page.Contains('#') => page[..page.IndexOf('#')],
            _ => page
        };
     
        if (string.IsNullOrEmpty(page))
            return;

        found = null;

        var markdown = await MarkdownContentProvider.GetMarkdownContent(page);

        if (markdown is not null)
        {
            found = true;
            content = markdown;
        }
        else
        {
            found = false;
        }
    }
}